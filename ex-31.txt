
> data(iris)

> # Convert Species to binary classification (for logistic regression)
> iris$Species <- as.factor(ifelse(iris$Species == "setosa", 1, 0))

> # Split the dataset into 80% training and 20% testing
> set.seed(123)  # Set seed for reproducibility

> sample_size <- floor(0.8 * nrow(iris))

> train_indices <- sample(seq_len(nrow(iris)), size = sample_size)

> trainData <- iris[train_indices, ]

> testData <- iris[-train_indices, ]

> # Train logistic regression model
> model <- glm(Species ~ Petal.Length + Petal.Width, data = trainData, family = binomial)

> # Predict probabilities on test data
> pred_prob <- predict(model, testData, type = "response")

> # Convert probabilities to binary classes (Threshold = 0.5)
> pred_class <- ifelse(pred_prob > 0.5, 1, 0)

> # Create confusion matrix
> conf_matrix <- table(Predicted = pred_class, Actual = testData$Species)

> print("Confusion Matrix:")
[1] "Confusion Matrix:"

> print(conf_matrix)
         Actual
Predicted  0  1
        0 20  0
        1  0 10

> # Define the vector for statistical computations
> values <- c(90, 50, 70, 80, 70, 60, 20, 30, 80, 90, 20)

> # Compute mean
> mean_value <- mean(values)

> print(paste("Mean:", mean_value))
[1] "Mean: 60"

> # Compute median
> median_value <- median(values)

> print(paste("Median:", median_value))
[1] "Median: 70"

> # Compute mode function (handling multiple modes)
> mode_function <- function(x) {
+   uniq_vals <- unique(x)
+   tabulated <- tabulate(match(x, uni .... [TRUNCATED] 

> mode_value <- mode_function(values)

> print(paste("Mode:", paste(mode_value, collapse = ", ")))
[1] "Mode: 90, 70, 80, 20"

> # Sort values in ascending order
> sorted_values <- sort(unique(values))

> # Find 2nd highest and 3rd lowest value
> second_highest <- sorted_values[length(sorted_values) - 1]

> third_lowest <- sorted_values[3]

> print(paste("Second Highest:", second_highest))
[1] "Second Highest: 80"

> print(paste("Third Lowest:", third_lowest))
[1] "Third Lowest: 50"

> sink("file=null")
